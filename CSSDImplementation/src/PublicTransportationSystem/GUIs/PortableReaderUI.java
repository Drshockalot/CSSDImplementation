/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PublicTransportationSystem.GUIs;

import PublicTransportationSystem.Journey;
import PublicTransportationSystem.Pass;
import PublicTransportationSystem.PortableReader;
import PublicTransportationSystem.Ticket;
import PublicTransportationSystem.Transaction;
import PublicTransportationSystem.TravelCard;
import PublicTransportationSystem.TravelSystem;
import PublicTransportationSystem.TypeEnums;
import PublicTransportationSystem.User;
import PublicTransportationSystem.Zone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author JackMcGlone
 */
public class PortableReaderUI extends javax.swing.JFrame {

    private PortableReader portableReader = new PortableReader();
    private TravelSystem system = null;
    private TravelCard currentCard = null;
    // Whethere we're on a bus or train
    private String travelType = null;
    //private final String travelType;

    /**
     * Creates new form PortableReaderUI
     *
     */
    public PortableReaderUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        scanPanel = new javax.swing.JPanel();
        scanCardTrainButton = new javax.swing.JButton();
        scanCardBusButton = new javax.swing.JButton();
        validPassPanel = new javax.swing.JPanel();
        passUserImage = new javax.swing.JPanel();
        validPassUserImagelabel = new javax.swing.JLabel(new javax.swing.ImageIcon(getClass().getResource("/Images/user_image.png")));
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        passUserName = new javax.swing.JLabel();
        passUserDob = new javax.swing.JLabel();
        passUserID = new javax.swing.JLabel();
        passUserBalance = new javax.swing.JLabel();
        passConfirmInspection = new javax.swing.JButton();
        payForTicket = new javax.swing.JPanel();
        paymentUserImage = new javax.swing.JPanel();
        paymentUserImagelabel = new javax.swing.JLabel(new javax.swing.ImageIcon(getClass().getResource("/Images/user_image.png")));
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        paymentUserName = new javax.swing.JLabel();
        paymentUserDob = new javax.swing.JLabel();
        paymentUserID = new javax.swing.JLabel();
        paymentUserBalance = new javax.swing.JLabel();
        paymentConfirmInspection = new javax.swing.JButton();
        fromZone = new javax.swing.JComboBox();
        toZone = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLayeredPane1.setLayout(new javax.swing.OverlayLayout(jLayeredPane1));

        scanCardTrainButton.setText("Scan Card On Train");
        scanCardTrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanCardTrainButtonActionPerformed(evt);
            }
        });

        scanCardBusButton.setText("Scan Card On Bus");
        scanCardBusButton.setMaximumSize(new java.awt.Dimension(138, 24));
        scanCardBusButton.setMinimumSize(new java.awt.Dimension(138, 24));
        scanCardBusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanCardBusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scanPanelLayout = new javax.swing.GroupLayout(scanPanel);
        scanPanel.setLayout(scanPanelLayout);
        scanPanelLayout.setHorizontalGroup(
            scanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scanPanelLayout.createSequentialGroup()
                .addContainerGap(155, Short.MAX_VALUE)
                .addGroup(scanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scanCardTrainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scanCardBusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(144, 144, 144))
        );
        scanPanelLayout.setVerticalGroup(
            scanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scanPanelLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(scanCardTrainButton)
                .addGap(18, 18, 18)
                .addComponent(scanCardBusButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(246, Short.MAX_VALUE))
        );

        jLayeredPane1.add(scanPanel);

        passUserImage.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        validPassUserImagelabel.setText(null);

        javax.swing.GroupLayout passUserImageLayout = new javax.swing.GroupLayout(passUserImage);
        passUserImage.setLayout(passUserImageLayout);
        passUserImageLayout.setHorizontalGroup(
            passUserImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(validPassUserImagelabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        passUserImageLayout.setVerticalGroup(
            passUserImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(validPassUserImagelabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("User Details");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 255, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Valid Pass");

        jLabel3.setText("Name: ");

        jLabel4.setText("DoB: ");

        jLabel5.setText("ID: ");

        jLabel6.setText("Balance: ");

        passUserName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        passUserName.setText("placeholder");

        passUserDob.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        passUserDob.setText("placeholder");

        passUserID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        passUserID.setText("placeholder");

        passUserBalance.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        passUserBalance.setText("placeholder");

        passConfirmInspection.setText("Confirm Inspection");
        passConfirmInspection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passConfirmInspectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout validPassPanelLayout = new javax.swing.GroupLayout(validPassPanel);
        validPassPanel.setLayout(validPassPanelLayout);
        validPassPanelLayout.setHorizontalGroup(
            validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(validPassPanelLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(passConfirmInspection)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(validPassPanelLayout.createSequentialGroup()
                .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(validPassPanelLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(validPassPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(passUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, validPassPanelLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passUserBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, validPassPanelLayout.createSequentialGroup()
                                .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(passUserID, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .addComponent(passUserDob, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .addComponent(passUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        validPassPanelLayout.setVerticalGroup(
            validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(validPassPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(validPassPanelLayout.createSequentialGroup()
                        .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(passUserName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(passUserDob))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(passUserID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(validPassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(passUserBalance))))
                .addGap(109, 109, 109)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(passConfirmInspection)
                .addGap(52, 52, 52))
        );

        jLayeredPane1.add(validPassPanel);

        paymentUserImage.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        paymentUserImagelabel.setText(null);

        javax.swing.GroupLayout paymentUserImageLayout = new javax.swing.GroupLayout(paymentUserImage);
        paymentUserImage.setLayout(paymentUserImageLayout);
        paymentUserImageLayout.setHorizontalGroup(
            paymentUserImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paymentUserImagelabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        paymentUserImageLayout.setVerticalGroup(
            paymentUserImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paymentUserImagelabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        jLabel7.setText("User Details");

        jLabel9.setText("Name: ");

        jLabel10.setText("DoB: ");

        jLabel11.setText("ID: ");

        jLabel12.setText("Balance: ");

        paymentUserName.setText("placeholder");

        paymentUserDob.setText("placeholder");

        paymentUserID.setText("placeholder");

        paymentUserBalance.setText("placeholder");

        paymentConfirmInspection.setText("Confirm Inspection");
        paymentConfirmInspection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentConfirmInspectionActionPerformed(evt);
            }
        });

        toZone.setModel(new javax.swing.DefaultComboBoxModel());

        jLabel8.setText("From:");

        jLabel13.setText("To:");

        javax.swing.GroupLayout payForTicketLayout = new javax.swing.GroupLayout(payForTicket);
        payForTicket.setLayout(payForTicketLayout);
        payForTicketLayout.setHorizontalGroup(
            payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(payForTicketLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(payForTicketLayout.createSequentialGroup()
                        .addComponent(paymentUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(payForTicketLayout.createSequentialGroup()
                                .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addGap(22, 22, 22)
                                .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(paymentUserDob, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(paymentUserID, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .addComponent(paymentUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(payForTicketLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(paymentUserBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, payForTicketLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(192, 192, 192)))
                .addContainerGap())
            .addGroup(payForTicketLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(paymentConfirmInspection)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(payForTicketLayout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13)
                    .addComponent(jLabel8)
                    .addComponent(toZone, 0, 240, Short.MAX_VALUE)
                    .addComponent(fromZone, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        payForTicketLayout.setVerticalGroup(
            payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(payForTicketLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(payForTicketLayout.createSequentialGroup()
                        .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(paymentUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(paymentUserDob))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(paymentUserID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(payForTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(paymentUserBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(76, 76, 76)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fromZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(paymentConfirmInspection)
                .addGap(52, 52, 52))
        );

        jLayeredPane1.add(payForTicket);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scanCardTrainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanCardTrainButtonActionPerformed
        // Train button pressed, we are on a train
        this.travelType = "TRAIN";
        setUpComponents();
    }//GEN-LAST:event_scanCardTrainButtonActionPerformed

    private void setUpComponents() {
        // Hide the first panel, we have our travel type now
        this.scanPanel.setVisible(false);
        // Read the card and get it
        getCurrentCardDetails();
        setUpTravelSystemInstance();
        ////////////////////////////////////////////////////////
        // Hard-coded pass/station/zone, for testing purposes //
        ////////////////////////////////////////////////////////
        Pass pass = null;

        // Get the correct pass - testing purposes
        if ("BUS".equals(this.travelType)) {
            pass = new Pass(TypeEnums.PassType.BUSJOURNEY);
        } else if ("TRAIN".equals(this.travelType)) {
            pass = new Pass(TypeEnums.PassType.TRAINJOURNEY);
        }

        // Only required for 'journey' passes (as opposed to day passes)
        pass.setDepartureZone(system.getZones().getZoneById(1));
        pass.setArrivalZone(system.getZones().getZoneById(2));
        currentCard.setPass(pass);
        currentCard.setLastDepartedStation(system.getStationSystems().getStationSystemById(1));
        ////////////////////////////////////////////////////////

        // Get the user details from TravelCard and add them to the UI
        User currentUser = currentCard.getUser();
        setUpUserDetails(currentUser, currentCard);

        validateJourney(currentCard);
    }

    private void getCurrentCardDetails() {
        // Read from the scanner
        try {
            currentCard = this.portableReader.readTravelCard();
        } catch (Throwable ex) {
            Logger.getLogger(PortableReaderUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setUpTravelSystemInstance() {
        try {
            system = TravelSystem.getInstance();
        } catch (Throwable ex) {
            Logger.getLogger(PortableReaderUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void validateJourney(TravelCard currentCard) {
        // If there is a pass, check that it is a valid one
        // Decide which UI panel to show
        if (!currentCard.checkForActivePass()) {
            TypeEnums.PassType passType = currentCard.getPassType();

            if ("BUS".equals(travelType)) {
                // If we're on a bus
                switch (passType) {
                    case BUSDAY:
                    case BUSANDTRAINDAY: {
                        // VALID PASS SCREEN
                        this.validPassPanel.setVisible(true);
                    }
                    case BUSJOURNEY:
                    case BUSANDTRAINJOURNEY: {
                        // Check the journey, approve/reject depending on result
                        this.payForTicket.setVisible(true);
                    }
                }
            } else if ("TRAIN".equals(travelType)) {
                // Or on a train
                switch (passType) {
                    case TRAINDAY:
                    case BUSANDTRAINDAY: {
                        // VALID PASS SCREEN
                        this.validPassPanel.setVisible(true);
                    }
                    case TRAINJOURNEY:
                    case BUSANDTRAINJOURNEY: {
                        // Check the journey, approve/reject depending on result
                        this.payForTicket.setVisible(true);
                    }
                }
            }
        }
    }

    private void scanCardBusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanCardBusButtonActionPerformed
        // Bus button pressed, we are on a bus
        this.travelType = "BUS";
        setUpComponents();
    }//GEN-LAST:event_scanCardBusButtonActionPerformed

    private void passConfirmInspectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passConfirmInspectionActionPerformed
        // The user has a valid pass, display a confirmation message
        JOptionPane.showMessageDialog(validPassPanel, "Ticket Inspection Confirmed");
        // V Have this stuff firing off the 'okay' botton press V
        this.validPassPanel.setVisible(false);
        this.payForTicket.setVisible(false);
        this.scanPanel.setVisible(true);
        // either close the application or return to the home screen here:
    }//GEN-LAST:event_passConfirmInspectionActionPerformed

    private void paymentConfirmInspectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentConfirmInspectionActionPerformed
        // Check the 'from' and 'to' zones entered by the user and compare them to the
        // values on their travel pass
        Pass targetPass = this.currentCard.getPass();
        if ((targetPass.arrivalZone() == this.toZone.getSelectedItem())
                && (targetPass.departureZone() == this.fromZone.getSelectedItem())) {
            handleValidPass();
        } else {
            handleInvalidPass();
        }
    }//GEN-LAST:event_paymentConfirmInspectionActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        AppSwitchboard.mainUI.setEnabled(true);
    }//GEN-LAST:event_formWindowClosing

    private void handleValidPass() {
        // Confirm that the pass is valid and return to the home screen
        // for another scan
        JOptionPane.showMessageDialog(payForTicket, "Ticket Inspection Confirmed", "Success", 1);
        this.validPassPanel.setVisible(false);
        this.payForTicket.setVisible(false);
        this.scanPanel.setVisible(true);
        // Clear the list before re-drawing
        this.toZone.removeAllItems();
    }

    private void handleInvalidPass() {
        // Catch the which button the user presses and handle th result
        String[] buttons = {"Pay for Journey", "Cancel"};
        int buttonIndex = JOptionPane.showOptionDialog(null, "Pass not valid for journey", "Invalid Pass",
                JOptionPane.WARNING_MESSAGE, 0, null, buttons, buttons[1]);
        // If the 'Pay for Journey' button is pressed
        if (buttonIndex == 0) {
            if (handleTransaction()) {
                // Payment has been successful, notify the user
                JOptionPane.showMessageDialog(payForTicket, "Ticket Inspection Confirmed", "Success", 1);
            } else {
                // Payment has been unsuccessful
                String[] fundsButtons = {"Add Funds", "Cancel"};
                int fundsButton = JOptionPane.showOptionDialog(null, "Insufficient Funds", "Attention",
                        JOptionPane.WARNING_MESSAGE, 0, null, fundsButtons, fundsButtons[1]);
            }
        }
    }

    private boolean handleTransaction() {
        // Create a new Transaction so that we can handle ticket payment
        Transaction transaction = new Transaction();
        // The users pass does not cover their desired journey,
        // so create a ticket
        Journey journey = system.getJourneys().getJourney(
                (Zone) this.fromZone.getSelectedItem(),
                (Zone) this.toZone.getSelectedItem());

        TypeEnums.TicketType ticketType = null;
        // Discern whether we are travelling on a bus or a train
        if ("TRAIN".equals(this.travelType)) {
            ticketType = TypeEnums.TicketType.TRAIN;
        } else if ("BUS".equals(this.travelType)) {
            ticketType = TypeEnums.TicketType.TRAIN;
        }
        Ticket newTicket = currentCard.userTickets().createNewTicket(journey, ticketType, false);
        // Pay for the ticket, returns true if the payment was successful
        return transaction.payForTicket(this.currentCard.userTickets(), newTicket, this.currentCard);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PortableReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PortableReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PortableReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PortableReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PortableReaderUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fromZone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JButton passConfirmInspection;
    private javax.swing.JLabel passUserBalance;
    private javax.swing.JLabel passUserDob;
    private javax.swing.JLabel passUserID;
    private javax.swing.JPanel passUserImage;
    private javax.swing.JLabel passUserName;
    private javax.swing.JPanel payForTicket;
    private javax.swing.JButton paymentConfirmInspection;
    private javax.swing.JLabel paymentUserBalance;
    private javax.swing.JLabel paymentUserDob;
    private javax.swing.JLabel paymentUserID;
    private javax.swing.JPanel paymentUserImage;
    private javax.swing.JLabel paymentUserImagelabel;
    private javax.swing.JLabel paymentUserName;
    private javax.swing.JButton scanCardBusButton;
    private javax.swing.JButton scanCardTrainButton;
    private javax.swing.JPanel scanPanel;
    private javax.swing.JComboBox toZone;
    private javax.swing.JPanel validPassPanel;
    private javax.swing.JLabel validPassUserImagelabel;
    // End of variables declaration//GEN-END:variables

    private void setUpUserDetails(User user, TravelCard card) {
        this.passUserName.setText(user.getUsername());
        this.passUserBalance.setText(Float.toString(card.getBalance()));
        this.passUserDob.setText(user.getDateOfBirth().toString());
        this.passUserID.setText(Integer.toString(user.getId()));

        this.paymentUserName.setText(user.getUsername());
        this.paymentUserBalance.setText(Float.toString(card.getBalance()));
        this.paymentUserDob.setText(user.getDateOfBirth().toString());
        this.paymentUserID.setText(Integer.toString(user.getId()));

        this.validPassPanel.setVisible(false);
        this.payForTicket.setVisible(false);

        if (!card.checkForScannedStation()) {
            this.fromZone.addItem(card.getDepartureDetails().getZone());
            this.fromZone.setEnabled(false);
        }

        // Add the potential destination zones to the list
        system.getZones().stream().forEach((zone) -> {
            this.toZone.addItem(zone);
        });
    }
}
